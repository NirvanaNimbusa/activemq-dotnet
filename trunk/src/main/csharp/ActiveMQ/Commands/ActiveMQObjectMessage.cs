/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

using System;
using System.Collections;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;

using ActiveMQ.OpenWire;
using ActiveMQ.Commands;
using NMS;

namespace ActiveMQ.Commands
{
    //
    //  Marshalling code for Open Wire Format for ActiveMQObjectMessage
    //
    //
    //  NOTE!: This file is autogenerated - do not modify!
    //         if you need to make a change, please see the Groovy scripts in the
    //         activemq-core module
    //
    public class ActiveMQObjectMessage : ActiveMQMessage, IObjectMessage
    {
        public const byte ID_ActiveMQObjectMessage = 26;
    			
        private ISerializable body;
		private IFormatter formatter;


		public override string ToString() {
            return GetType().Name + "["
                + " ]";
		}
	
        public override byte GetDataStructureType() {
            return ID_ActiveMQObjectMessage;
        }


        // Properties
	    
        public ISerializable Body
        {
            get 
			{
                if (body == null)
                {
                    body = (ISerializable) Formatter.Deserialize(new MemoryStream(Content));
                }
                return body;
            }

			set 
			{
				body = value;
			}
        }
        
        public override void BeforeMarshall(OpenWireFormat wireFormat)
        {
            if (body == null)
            {
                Content = null;
            }
            else
            {
				MemoryStream stream = new MemoryStream();
				Formatter.Serialize(stream, body);
                Content = stream.ToArray();
            }
            
            //Console.WriteLine("BeforeMarshalling, content is: " + Content);
			
            base.BeforeMarshall(wireFormat);
        }

		public IFormatter Formatter
		{
			get
			{
				if (formatter == null)
				{
					formatter = new BinaryFormatter();
				}
				return formatter;
			}
			
			set 
			{
				formatter = value;
			}
		}
    }
}
